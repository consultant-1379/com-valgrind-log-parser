__        __ _ _      _        _ _ _    _ _ _ _  _  _ _     _  _ _ _ _
\ \      / // _ \    | |      |  _ _|  |  _ _  || ||   \   | ||  _ _  \
 \ \    / // / \ \   | |      | |  _ _ | |_ _| || || |\ \  | || |   \  |
  \ \  / // /_ _\ \  | |      | | |_  ||  _ _ _|| || | \ \ | || |    | |
   \ \/ // /_ _ _\ \ | |_ _ _ | |_ _| || |  \ \ | || |  \ \| || |_ _/  |
    \__//_/       \_\|_ _ _ _||_ _ _ _||_|   \_\|_||_|   \_ _||_ _ _ _/
 _        _ _ _ _  _ _ _
| |      |  _ _  ||  _ _|
| |      | |   | || |  _ _
| |      | |   | || | |_  |
| |_ _ _ | |_ _| || |_ _| |
|_ _ _ _||_ _ _ _||_ _ _ _|
 _ _ _ _      _ _      _ _ _ _  _ _ _ _  _ _ _ _  _ _ _ _
|  _ _  |    / _ \    |  _ _  ||  _ _  ||  _ _ _||  _ _  |
| |_ _| |   / / \ \   | |_ _| | \ \  |_|| |_ _ _ | |_ _| |
|  _ _ _|  / /_ _\ \  |  _ _ _| _ \ \   |  _ _ _||  _ _ _|
| |       / /_ _ _\ \ | |  \ \ | | _\ \ | |_ _ _ | |  \ \
|_|      /_/       \_\|_|   \_\|_ _ _ _||_ _ _ _||_|   \_\


TOC
---

1. Valgrind Log Parser Description
2. Tool
3. Requirements
4. Execution
5. Valgrind Report Description
6. Limitations


1. Valgrind Log Parser Description
----------------------------------

Whenever an application triggers same event multiple times, valgrind (memcheck) tool will report leak/error stack traces related to that event repeatedly.
If the leak/error stack traces reported are huge in number and are spread across several valgrind logs, then more amount of manpower and time is consumed for analyzing and confirming if it is a unique or a redundant leak/error stack trace.
In order to overcome this problem, the tool - "Valgrind Log Parser" is developed.

Valgrind Log Parser takes all the valgrind xml logs generated by valgrind (memcheck) tool as input and prepares a Valgrind Report.

Advantages of Valgrind Report generated by Valgrind Log Parser :-

	* Categorizes each leak/error type detected by valgrind.
	* Contains only unique leak/error stack traces (i.e. no repetition of leak/error stack traces).
	* In case of definitely lost, indirectly lost, possibly lost and still reachable memory leaks, maximum bytes of memory lost and sum of bytes of memory lost by repeated occurrence of respective leak stack trace is also displayed. This helps in prioritizing leaks.
	* Displays the count of occurrence of each leak/error stack trace.
	* Displays atmost 5 valgrind log filenames in which the leak/error stack trace has been reported.
	* Reduces the manpower and time taken for analysis of valgrind logs.

2. Tool
-------

The entire tool is created as a maven project.

Source Code will be avaliable in valgrind_log_parser/src/main/java/se/ericsson/cba/com/valgrindlogparser
Test Code will be available in valgrind_log_parser/src/test/java/se/ericsson/cba/com/valgrindlogparser

NOTE :-

Test Code written in this project will execute Valgrind Log Parser on sample valgrind logs and prepares a valgrind report. This helps the developer to debug whether the changes made in the Valgrind Log Parser source code are working correctly or not.

- Sample valgrind logs for testing are available in valgrind_log_parser/test_stub/test_logs directory.
- When test code is executed, a directory named test_report will be created in valgrind_log_parser/test_stub location. valgrind_log_parser/test_stub/test_report will contain valgrind report(vargrind_report.html) for the sample valgrind logs.

3. Requirements
---------------

Windows/Unix/Linux Operating System with jdk(> 1.5) and maven installed.
junit 3.8.1

4. Execution
------------

Inorder to Compile and Execute Valgrind Log Parser, ensure that -

(a)jdk and maven are installed
	$ which java
	$ which mvn

(b)Environment variables for jdk and maven are set
	$ setenv JAVA_HOME <path_to_directory_where_jdk_is_installed>
	$ setenv PATH $JAVA_HOME/bin:$PATH
	$ setenv M2_HOME <path_to_directory_where_maven_is_installed>
	$ setenv M2 $M2_HOME/bin

(c)Ensure that you are in valgrind_log_parser directory in the terminal.

(d)Execute the below set of commands -

	$ mvn clean
	Above command deletes the test_report directory and clears the contents of target directory.

	$ mvn compile
	Above command compiles valgrind source code.

	$ mvn test
	Above command compiles both source code and test code. It also executes the test code.

	$ mvn package
	Above command compiles both source code and test code, executes the test code and creates an executable jar file under target directory.

5. Valgrind Report Description
------------------------------

Two tables will be displayed in valgrind_report.html.

(a) Top table contains the following fields.

	* Leak/Error Type                      : Link for each leak/error type detected by valgrind. A click on each leak/error type link will display respective report in bottom table.
	* Frequency with repeated occurance    : Count of all stack traces belonging to particular leak/error type with repetition.
	* Frequency without repeated occurance : Count of all stack traces belonging to particular leak/error type without repetition(i.e., unique leak/error count for particular leak/error type).


(b) Bottom table displays leak/error stack trace information in the following fields

	* Leak/Error Number 				: Serial number for stack trace of respective leak/error type.
	* Leak/Error Stack Trace			: Leak/error stack trace. In case of definitely lost, indirectly lost, possibly lost and still reachable memory leaks, the maximum bytes of memory lost and sum of bytes of memory lost by repeated occurrence of respective leak stack trace is also displayed.
	* Frequency count of Leak/Error			: Count of occurrence of leak/error stack trace.
	* Valgrind Logs in which Leak/Error occured     : Atmost 5 Valgrind log filenames in which leak/error stack trace is reported.

6. Limitations
--------------

* Valgrind Log Parser has been implemented and tested on the logs obtained by executing valgrind with the following options :-

         --tool=memcheck
	 --leak-check=full
	 --error-limit=no
	 --show-reachable=yes
	 --track-origins=yes
	 --suppressions=<path_to_suppressions_file>
	 --xml=yes
	 --xml-file=<path_to_valgrind_xml_log_file>

* Valgrind Log Parser will work only if "memcheck tool" is used with valgrind for generating valgrind logs.
* Valgrind Log Parser will work only for xml format of valgrind logs.
* Valgrind Log Parser skips invalid/corrupted valgrind logs while generating Valgrind Report.
* Disk space equivalent to 30%-50% of input valgrind logs size is required. This is beacuse - in the process of generating Valgrind Report, input valgrind xml logs will be parsed using SAX parser and temporary logs will be generated which are used in preparing unique leak/error trace information. These temporary logs will be deleted before the execution of Valgrind Log Parser completes.

